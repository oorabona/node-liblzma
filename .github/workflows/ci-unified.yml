---
name: Unified CI Pipeline
on:
  push:
    paths:
      # Core source files
      - "src/**"
      - "binding.gyp"
      - "scripts/**"
      - "test/**"
      # Build configuration
      - "package.json"
      - "pnpm-lock.yaml"
      - "tsconfig.json"
      - "biome.json"
      - "xz-version.json"
      # Workflow files themselves
      - ".github/workflows/ci-unified.yml"
      # Exclude documentation and non-critical files
      - "!**/*.md"
      - "!docs/**"
      - "!.vscode/**"
      - "!.idea/**"
      - "!*.txt"
      - "!LICENSE*"
      - "!.gitignore"
      - "!.editorconfig"
    branches:
      - master
      - "releases/**"
    tags-ignore:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    paths:
      - "src/**"
      - "binding.gyp"
      - "scripts/**"
      - "test/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "tsconfig.json"
      - "biome.json"
      - "xz-version.json"
      - ".github/workflows/ci-unified.yml"
      - "!**/*.md"
      - "!docs/**"
    branches:
      - master
      - "releases/**"
  workflow_dispatch:
    inputs:
      xz_version:
        description: >-
          XZ version (e.g., v5.8.1, v5.4.0, latest, or empty for default)
        required: false
        type: string
      run_full_matrix:
        description: 'Run full test matrix (otherwise smoke tests only)'
        required: false
        default: false
        type: boolean
  schedule:
    # Nightly full CI run
    - cron: '0 2 * * *'

permissions:
  contents: read

env:
  # Global environment variables
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # Determine what to run based on trigger and changes
  setup:
    name: Setup and Detection
    runs-on: ubuntu-latest
    outputs:
      run-smoke-only: ${{ steps.detect.outputs.run-smoke-only }}
      run-full-matrix: ${{ steps.detect.outputs.run-full-matrix }}
      changed-files: ${{ steps.detect.outputs.changed-files }}
      xz-version: ${{ steps.detect.outputs.xz-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes and scope
        id: detect
        run: |
          # Determine XZ version
          XZ_VERSION="${{ github.event.inputs.xz_version || '' }}"
          echo "xz-version=$XZ_VERSION" >> $GITHUB_OUTPUT

          # Check if this is a PR or manual dispatch requesting smoke only
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            RUN_SMOKE_ONLY="true"
            RUN_FULL_MATRIX="false"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RUN_SMOKE_ONLY="${{ github.event.inputs.run_full_matrix == 'false' }}"
            RUN_FULL_MATRIX="${{ github.event.inputs.run_full_matrix }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            RUN_SMOKE_ONLY="false"
            RUN_FULL_MATRIX="true"
          else
            # Push to main branches - check if changes are minimal
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || echo "")
            echo "changed-files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            # Check if changes are significant (require full CI)
            # Significant: src/, binding.gyp, scripts/, test/, build configs
            if echo "$CHANGED_FILES" | grep -qE '^(src/|binding\.gyp|scripts/|test/|package\.json|pnpm-lock\.yaml|tsconfig\.json|biome\.json|xz-version\.json|\.github/workflows/ci-unified\.yml)'; then
              RUN_SMOKE_ONLY="false"
              RUN_FULL_MATRIX="true"
              echo "📋 Significant changes detected - running full matrix"
            else
              RUN_SMOKE_ONLY="true"
              RUN_FULL_MATRIX="false"
              echo "📄 Only docs/config changes - running smoke tests only"
            fi
          fi

          echo "run-smoke-only=$RUN_SMOKE_ONLY" >> $GITHUB_OUTPUT
          echo "run-full-matrix=$RUN_FULL_MATRIX" >> $GITHUB_OUTPUT

          echo "🔍 Detection results:"
          echo "  Event: ${{ github.event_name }}"
          echo "  Smoke only: $RUN_SMOKE_ONLY"
          echo "  Full matrix: $RUN_FULL_MATRIX"
          echo "  XZ version: $XZ_VERSION"

  # Single job to download XZ sources (shared across all OS)
  download-xz:
    name: Download XZ Sources
    runs-on: ubuntu-latest
    needs: setup
    if: >-
      needs.setup.outputs.run-smoke-only == 'true' ||
      needs.setup.outputs.run-full-matrix == 'true'
    outputs:
      xz-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          XZ_VERSION="${{ needs.setup.outputs.xz-version }}"
          CACHE_KEY="xz-sources-$XZ_VERSION-${{ hashFiles('scripts/download_xz_from_github.py', 'xz-version.json') }}"
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "🔑 XZ cache key: $CACHE_KEY"

      - name: Cache XZ sources
        id: cache-xz
        uses: actions/cache@v4
        with:
          path: |
            deps/xz
            deps/xz.tar.gz
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            xz-sources-${{ needs.setup.outputs.xz-version }}-
            xz-sources-

      - name: Setup Python
        if: steps.cache-xz.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Download XZ sources
        if: steps.cache-xz.outputs.cache-hit != 'true'
        run: |
          echo "📥 Downloading XZ sources..."
          python scripts/download_xz_from_github.py
          ls -la deps/
        env:
          XZ_VERSION: ${{ needs.setup.outputs.xz-version }}

      - name: Upload XZ sources as artifact
        uses: actions/upload-artifact@v4
        with:
          name: xz-sources
          path: |
            deps/xz
            deps/xz.tar.gz
          retention-days: 1
          compression-level: 1

  # Lint and format job (run once, not per matrix combination)
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup
    if: >-
      needs.setup.outputs.run-smoke-only == 'true' ||
      needs.setup.outputs.run-full-matrix == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: quality-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Build TypeScript
        run: pnpm run build

      - name: Type check
        run: pnpm run type-check

      - name: Lint and format check
        run: pnpm run check

  # Smoke tests (fast, essential combinations only)
  smoke-test:
    name: Smoke Test
    needs: [setup, download-xz, quality]
    if: needs.setup.outputs.run-smoke-only == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [20]
        runtime_link: [static]
        use_global_liblzma: [false]
        enable_threads: [no]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download XZ sources
        uses: actions/download-artifact@v4
        with:
          name: xz-sources
          path: .

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: x64
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup ccache (Unix)
        if: runner.os != 'Windows'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: >-
            smoke-${{ runner.os }}-ccache-${{ matrix.runtime_link }}-${{ matrix.enable_threads }}
          max-size: 200M

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/pnpm/store
            ~/Library/pnpm/store
            ~\AppData\Local\pnpm\store
          key: smoke-${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            smoke-${{ runner.os }}-pnpm-
            ${{ runner.os }}-pnpm-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            build/liblzma
            prebuilds
          key: >-
            smoke-${{ runner.os }}-build-${{ matrix.runtime_link }}-${{ matrix.enable_threads }}-${{ needs.download-xz.outputs.xz-cache-key }}
          restore-keys: |
            smoke-${{ runner.os }}-build-${{ matrix.runtime_link }}-${{ matrix.enable_threads }}-

      - name: Install and build
        run: pnpm install --frozen-lockfile
        env:
          XZ_VERSION: ${{ needs.setup.outputs.xz-version }}
          USE_GLOBAL: ${{ matrix.use_global_liblzma }}
          RUNTIME_LINK: ${{ matrix.runtime_link }}
          ENABLE_THREAD_SUPPORT: ${{ matrix.enable_threads }}
          CC: >-
            ${{ runner.os == 'Linux' && 'ccache gcc' ||
            (runner.os == 'macOS' && 'ccache clang' || '') }}
          CXX: >-
            ${{ runner.os == 'Linux' && 'ccache g++' ||
            (runner.os == 'macOS' && 'ccache clang++' || '') }}

      - name: Build TypeScript
        run: pnpm run build

      - name: Run tests
        run: pnpm test

  # Full matrix (comprehensive testing)
  full-test:
    name: Full Test Matrix
    needs: [setup, download-xz, quality]
    if: needs.setup.outputs.run-full-matrix == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux combinations
          - os: ubuntu-latest
            node: 18
            runtime_link: static
            use_global_liblzma: false
            enable_threads: no
          - os: ubuntu-latest
            node: 18
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: no
          - os: ubuntu-latest
            node: 20
            runtime_link: static
            use_global_liblzma: false
            enable_threads: no
          - os: ubuntu-latest
            node: 20
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: no
          - os: ubuntu-latest
            node: 22
            runtime_link: static
            use_global_liblzma: false
            enable_threads: no
          - os: ubuntu-latest
            node: 22
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: no
          - os: ubuntu-latest
            node: 18
            runtime_link: static
            use_global_liblzma: true
            enable_threads: no
          - os: ubuntu-latest
            node: 18
            runtime_link: shared
            use_global_liblzma: true
            enable_threads: no
          - os: ubuntu-latest
            node: 20
            runtime_link: static
            use_global_liblzma: true
            enable_threads: no
          - os: ubuntu-latest
            node: 20
            runtime_link: shared
            use_global_liblzma: true
            enable_threads: no
          - os: ubuntu-latest
            node: 22
            runtime_link: static
            use_global_liblzma: true
            enable_threads: no
          - os: ubuntu-latest
            node: 22
            runtime_link: shared
            use_global_liblzma: true
            enable_threads: no
          # macOS combinations
          - os: macos-latest
            node: 18
            runtime_link: static
            use_global_liblzma: false
            enable_threads: no
          - os: macos-latest
            node: 18
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: no
          - os: macos-latest
            node: 20
            runtime_link: static
            use_global_liblzma: false
            enable_threads: no
          - os: macos-latest
            node: 20
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: no
          - os: macos-latest
            node: 22
            runtime_link: static
            use_global_liblzma: false
            enable_threads: no
          - os: macos-latest
            node: 22
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: no
          - os: macos-latest
            node: 18
            runtime_link: static
            use_global_liblzma: true
            enable_threads: no
          - os: macos-latest
            node: 18
            runtime_link: shared
            use_global_liblzma: true
            enable_threads: no
          - os: macos-latest
            node: 20
            runtime_link: static
            use_global_liblzma: true
            enable_threads: no
          - os: macos-latest
            node: 20
            runtime_link: shared
            use_global_liblzma: true
            enable_threads: no
          - os: macos-latest
            node: 22
            runtime_link: static
            use_global_liblzma: true
            enable_threads: no
          - os: macos-latest
            node: 22
            runtime_link: shared
            use_global_liblzma: true
            enable_threads: no
          # Windows combinations (no global liblzma available)
          - os: windows-latest
            node: 18
            runtime_link: static
            use_global_liblzma: false
            enable_threads: no
          - os: windows-latest
            node: 18
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: no
          - os: windows-latest
            node: 20
            runtime_link: static
            use_global_liblzma: false
            enable_threads: no
          - os: windows-latest
            node: 20
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: no
          - os: windows-latest
            node: 22
            runtime_link: static
            use_global_liblzma: false
            enable_threads: no
          - os: windows-latest
            node: 22
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: no
          - os: windows-latest
            node: 18
            runtime_link: static
            use_global_liblzma: false
            enable_threads: yes
          - os: windows-latest
            node: 18
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: yes
          - os: windows-latest
            node: 20
            runtime_link: static
            use_global_liblzma: false
            enable_threads: yes
          - os: windows-latest
            node: 20
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: yes
          - os: windows-latest
            node: 22
            runtime_link: static
            use_global_liblzma: false
            enable_threads: yes
          - os: windows-latest
            node: 22
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: yes

    runs-on: ${{ matrix.os }}
    name: >-
      Node ${{ matrix.node }} / ${{ matrix.os }} / Global=${{ matrix.use_global_liblzma }} /
      Link=${{ matrix.runtime_link }} / Threads=${{ matrix.enable_threads }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download XZ sources
        uses: actions/download-artifact@v4
        with:
          name: xz-sources
          path: .

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: x64
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install system liblzma (Linux)
        if: matrix.use_global_liblzma == true && runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y liblzma-dev

      - name: Setup ccache (Unix)
        if: runner.os != 'Windows'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: >-
            full-${{ runner.os }}-ccache-${{ matrix.runtime_link }}-${{ matrix.enable_threads }}
          max-size: 500M

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/pnpm/store
            ~/Library/pnpm/store
            ~\AppData\Local\pnpm\store
          key: full-${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            full-${{ runner.os }}-pnpm-
            smoke-${{ runner.os }}-pnpm-
            ${{ runner.os }}-pnpm-

      - name: Cache build artifacts
        if: matrix.use_global_liblzma == false
        uses: actions/cache@v4
        with:
          path: |
            build/liblzma
            prebuilds
          key: >-
            full-${{ runner.os }}-build-${{ matrix.runtime_link }}-${{ matrix.enable_threads }}-${{ needs.download-xz.outputs.xz-cache-key }}
          restore-keys: |
            full-${{ runner.os }}-build-${{ matrix.runtime_link }}-${{ matrix.enable_threads }}-
            smoke-${{ runner.os }}-build-${{ matrix.runtime_link }}-${{ matrix.enable_threads }}-

      - name: Install and build
        run: pnpm install --frozen-lockfile
        env:
          XZ_VERSION: ${{ needs.setup.outputs.xz-version }}
          USE_GLOBAL: ${{ matrix.use_global_liblzma }}
          RUNTIME_LINK: ${{ matrix.runtime_link }}
          ENABLE_THREAD_SUPPORT: ${{ matrix.enable_threads }}
          CC: >-
            ${{ runner.os == 'Linux' && 'ccache gcc' ||
            (runner.os == 'macOS' && 'ccache clang' || '') }}
          CXX: >-
            ${{ runner.os == 'Linux' && 'ccache g++' ||
            (runner.os == 'macOS' && 'ccache clang++' || '') }}

      - name: Build TypeScript
        run: pnpm run build

      - name: Run tests
        run: pnpm test

  # Multi-threading capability tests (separate job due to complexity)
  threading-test:
    name: Threading Tests
    needs: [setup, download-xz, quality]
    if: needs.setup.outputs.run-full-matrix == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test threading on each OS
          - os: ubuntu-latest
            node: 20
            runtime_link: static
            use_global_liblzma: false
            enable_threads: yes
          - os: ubuntu-latest
            node: 20
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: yes
          - os: macos-latest
            node: 20
            runtime_link: static
            use_global_liblzma: false
            enable_threads: yes
          - os: macos-latest
            node: 20
            runtime_link: shared
            use_global_liblzma: false
            enable_threads: yes

    runs-on: ${{ matrix.os }}
    name: >-
      Threading / Node ${{ matrix.node }} / ${{ matrix.os }} /
      Link=${{ matrix.runtime_link }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download XZ sources
        uses: actions/download-artifact@v4
        with:
          name: xz-sources
          path: .

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: x64
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: >-
            threading-${{ runner.os }}-ccache-${{ matrix.runtime_link }}-${{ matrix.enable_threads }}
          max-size: 300M

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/pnpm/store
            ~/Library/pnpm/store
          key: >-
            threading-${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            threading-${{ runner.os }}-pnpm-
            full-${{ runner.os }}-pnpm-
            ${{ runner.os }}-pnpm-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            build/liblzma
            prebuilds
          key: >-
            threading-${{ runner.os }}-build-${{ matrix.runtime_link }}-${{ matrix.enable_threads }}-${{ needs.download-xz.outputs.xz-cache-key }}
          restore-keys: |
            threading-${{ runner.os }}-build-${{ matrix.runtime_link }}-${{ matrix.enable_threads }}-

      - name: Install and build
        run: pnpm install --frozen-lockfile
        env:
          XZ_VERSION: ${{ needs.setup.outputs.xz-version }}
          USE_GLOBAL: ${{ matrix.use_global_liblzma }}
          RUNTIME_LINK: ${{ matrix.runtime_link }}
          ENABLE_THREAD_SUPPORT: ${{ matrix.enable_threads }}
          CC: >-
            ${{ runner.os == 'Linux' && 'ccache gcc' ||
            (runner.os == 'macOS' && 'ccache clang' || '') }}
          CXX: >-
            ${{ runner.os == 'Linux' && 'ccache g++' ||
            (runner.os == 'macOS' && 'ccache clang++' || '') }}

      - name: Build TypeScript
        run: pnpm run build

      - name: Run tests
        run: pnpm test

  # Final summary
  summary:
    name: CI Summary
    needs: [setup, quality, smoke-test, full-test, threading-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary
        run: |
          echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Configuration
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Smoke only**: ${{ needs.setup.outputs.run-smoke-only }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Full matrix**: ${{ needs.setup.outputs.run-full-matrix }}" >> $GITHUB_STEP_SUMMARY
          echo "- **XZ version**: ${{ needs.setup.outputs.xz-version || 'default' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Results
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality**: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Smoke Tests**: ${{ needs.smoke-test.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Full Tests**: ${{ needs.full-test.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Threading Tests**: ${{ needs.threading-test.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          QUALITY_OK="${{ needs.quality.result == 'success' }}"
          SMOKE_OK="${{ needs.smoke-test.result == 'success' || needs.smoke-test.result == '' }}"
          FULL_OK="${{ needs.full-test.result == 'success' || needs.full-test.result == '' }}"
          THREADING_OK="${{ needs.threading-test.result == 'success' || needs.threading-test.result == '' }}"

          if [[ "$QUALITY_OK" == "true" && "$SMOKE_OK" == "true" && "$FULL_OK" == "true" && "$THREADING_OK" == "true" ]]; then
            echo "### ✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Some checks failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi